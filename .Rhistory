cut_data<- sample(1:nrow(TTD), size = 9/10* nrow(TTD), replace = FALSE)
#select the 90% of the data set for the training
training_set <- TTD[cut_data, ]
#rest of 10% for the test
testing_set <- TTD[-cut_data, ]
rf_model <- randomForest(Survived ~ ., data = training_set,
ntree = 1000,
mtry = 5,
nodesize = 1,
importance = TRUE)
print(rf_model)
predictions <- predict(rf_model, newdata = testing_set)
# Assuming 'Survived' is a factor and predictions are made accordingly
actual <- testing_set$Survived
conf_matrix <- table(Predicted = predictions, Actual = actual)
# Calculate accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
#calculate how many row in the TTD data set
cut_data<- sample(1:nrow(TTD), size = 9/10* nrow(TTD), replace = FALSE)
#select the 90% of the data set for the training
training_set <- TTD[cut_data, ]
#rest of 10% for the test
testing_set <- TTD[-cut_data, ]
rf_model <- randomForest(Survived ~ ., data = training_set,
ntree = 100000,
mtry = 5,
nodesize = 1,
importance = TRUE)
print(rf_model)
predictions <- predict(rf_model, newdata = testing_set)
# Assuming 'Survived' is a factor and predictions are made accordingly
actual <- testing_set$Survived
conf_matrix <- table(Predicted = predictions, Actual = actual)
# Calculate accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
# Assuming TTD is your dataset and Survived is the outcome variable
# Prepare your data (TTD) and the trainControl for cross-validation
control <- trainControl(method="cv", number=10, search="grid", allowParallel = TRUE)
# Define a sequence of ntree values to test
tuneGrid <- expand.grid(.interaction.depth = c(1, 3, 5),
.n.trees = c(100, 500),
.shrinkage = c(0.01, 0.1))
# Train the model across the ntree range
# Note: mtry might need to be set or explored as well; here we use the default sqrt(number of predictors)
model_test <- train(Survived ~ ., data=TTD, method="rf", trControl=control, tuneGrid=ntreeGrid)
print(model_test)
# the optimual mtry is
# Assuming TTD is your dataset and Survived is the outcome variable
# Prepare your data (TTD) and the trainControl for cross-validation
control <- trainControl(method="cv", number=10, search="grid", allowParallel = TRUE)
# Define a sequence of ntree values to test
ntreeGrid <- expand.grid(mtry=1:10)
# Train the model across the ntree range
# Note: mtry might need to be set or explored as well; here we use the default sqrt(number of predictors)
model_test <- train(Survived ~ ., data=TTD, method="rf", trControl=control, tuneGrid=ntreeGrid)
print(model_test)
# the optimual mtry is 5
# Assuming TTD is your dataset and Survived is the outcome variable
# Prepare your data (TTD) and the trainControl for cross-validation
control <- trainControl(method="cv", number=10, search="grid", allowParallel = TRUE)
# Define a sequence of ntree values to test
ntreeGrid <- expand.grid(mtry=1:10)
# Train the model across the ntree range
set.seed(12345)
# Note: mtry might need to be set or explored as well; here we use the default sqrt(number of predictors)
model_test <- train(Survived ~ ., data=TTD, method="rf", trControl=control, tuneGrid=ntreeGrid)
print(model_test)
rf_model <- randomForest(Survived ~ ., data = training_set,
ntree = 10000,
mtry = 3,
nodesize = 1,
importance = TRUE)
print(rf_model)
predictions <- predict(rf_model, newdata = testing_set)
# Assuming 'Survived' is a factor and predictions are made accordingly
actual <- testing_set$Survived
conf_matrix <- table(Predicted = predictions, Actual = actual)
# Calculate accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
# Import test dataset
test_data_set <- read_csv("path/to/Titanic_test.csv")
# Import test dataset
test_data_set <- read_csv("Titanic data/Titanic_test.csv")
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/Titanic_test.csv")
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Make predictions with the Random Forest model
prediction <- predict(rf_model, newdata = test_data_ultra, type = "response")
# Add the prediction results back to the test dataset
test_data_set$Survived <- as.integer(prediction) # Ensure predictions are in the correct format
# Prepare the final output dataset
The_final_test_rf_model <- data.frame(PassengerId = test_data_set$PassengerId,
Survived = test_data_set$Survived)
# Save the output to a CSV file
write.csv(The_final_test_rf_model, "The_final_test_rf_model.csv", row.names = FALSE)
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Make predictions with the Random Forest model
prediction <- predict(rf_model, newdata = test_data_ultra, type = "response")
# Add the prediction results back to the test dataset
test_data_set$Survived <- as.integer(prediction) -1 # Ensure predictions are in the correct format
# Prepare the final output dataset
The_final_test_rf_model <- data.frame(PassengerId = test_data_set$PassengerId,
Survived = test_data_set$Survived)
# Save the output to a CSV file
write.csv(The_final_test_rf_model, "The_final_test_rf_model.csv", row.names = FALSE)
test_data_set$Survived <- as.integer(prediction) -1
test_data_set
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# Convert factor predictions to binary format (0 and 1)
binary_predictions <- as.integer(predictions) - 1
# Add binary predictions to the test dataset
test_data_ultra$Survived <- binary_predictions
# Prepare the final output dataset with necessary columns
final_output <- test_data_ultra %>%
select(PassengerId, Survived)
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# Make predictions on the test dataset
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# Convert factor predictions to binary format (0 and 1)
binary_predictions <- as.integer(predictions) - 1
# Add binary predictions to the test dataset
test_data_ultra$Survived <- binary_predictions
# Ensure dplyr's select is used to avoid any potential namespace conflict
final_output <- test_data_ultra %>%
dplyr::select(PassengerId, Survived)
# Save the output to a CSV file
write.csv(final_output, "final_predictions_rf_model.csv", row.names = FALSE)
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
# 将输出保存到CSV文件中
write.csv(final_output, "final_predictions_rf_model.csv", row.names = FALSE)
test_data_ultra$Survived <- binary_predictions
# 创建最终输出的数据框，包含PassengerId和预测的Survived列
final_output <- test_data_ultra %>%
select(PassengerId, Survived)
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
filtered_output <- final_output %>%
filter(PassengerId >= 892 & PassengerId <= 1309)
# 将输出保存到CSV文件中
write.csv(final_output, "final_predictions_rf_model.csv", row.names = FALSE)
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
filtered_output <- final_output %>%
filter(PassengerId >= 892 & PassengerId <= 1309)
# 将输出保存到CSV文件中
write.csv(final_output, "final_predictions_rf_model.csv", row.names = FALSE)
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
final_output <- test_data_set %>%
filter(PassengerId >= 892, PassengerId <= 1309) %>%
select(PassengerId, Survived)
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
final_output <- test_data_set %>%
filter(PassengerId >= 892, PassengerId <= 1309) %>%
select(PassengerId, Survived)
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
final_output <- test_data_set %>%
filter(PassengerId >= 892, PassengerId <= 1309) %>%
dplyr::select(PassengerId, Survived)
# 将输出保存到CSV文件中
write.csv(final_output, "final_predictions_rf_model.csv", row.names = FALSE)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
final_output <- test_data_set %>%
filter(PassengerId >= 892, PassengerId <= 1309) %>%
select(PassengerId, Survived)
#calculate how many row in the TTD data set
cut_data<- sample(1:nrow(TTD), size = 9/10* nrow(TTD), replace = FALSE)
#select the 90% of the data set for the training
training_set <- TTD[cut_data, ]
#rest of 10% for the test
testing_set <- TTD[-cut_data, ]
rf_model <- randomForest(Survived ~ ., data = training_set,
ntree = 10000,
mtry = 3,
nodesize = 1,
importance = TRUE)
print(rf_model)
predictions <- predict(rf_model, newdata = testing_set)
# Assuming 'Survived' is a factor and predictions are made accordingly
actual <- testing_set$Survived
conf_matrix <- table(Predicted = predictions, Actual = actual)
# Calculate accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
####
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
filtered_output <- final_output %>%
filter(PassengerId >= 892 & PassengerId <= 1309)
# 将输出保存到CSV文件中
write.csv(final_output, "final_predictions_rf_model.csv", row.names = FALSE)
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/train.csv")
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
# 将预测结果转换为二进制格式（0和1），如果需要的话
binary_predictions <- as.integer(predictions) - 1
# 将二进制预测结果添加到测试数据集中
test_data_ultra$Survived <- binary_predictions
# 准备最终的输出数据框，确保包含PassengerId和Survived列
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
# 将输出保存到CSV文件中
write.csv(final_output, "final_predictions_rf_model.csv", row.names = FALSE)
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/test.csv",
col_types = cols(Name = col_skip(), Parch = col_skip(),
Ticket = col_skip(), Fare = col_skip(),
Cabin = col_skip()))
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
# Import test dataset
test_data_set <- read_csv("Titanic data/test.csv",
col_types = cols(Name = col_skip(),
Ticket = col_skip(), Fare = col_skip(),
Cabin = col_skip()))
# Replace missing Age values with the mean Age from the training set
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
# Convert the 'Sex' column into dummy variables and remove the original 'Sex' column
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
# Assuming rf_model is your trained Random Forest model
# and test_data_ultra is your prepared test dataset that includes PassengerId
# 假设你已经完成了预测
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
rm( list = ls())
rm( list = ls())
#setting the saving addreess
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
#####################
#Step one: Clean the data
#####################
Titanic_train_raw <- read_csv("Titanic data/train.csv",
col_types = cols( Name = col_skip(), Ticket = col_skip(),
Cabin = col_skip()))
#At here I skiped their name which does not impact the model training,
#their ticket number with is not important and their cabin which has limit number
################ The age gap.
#I notice there are some age part are empty so i decided to use mean of age to fill the gap.
#but before that I just need to check the distribution of age between the survived and died
Titanic_train_cleaned <- na.omit(Titanic_train_without_age_gap)
Titanic_train_raw <- read_csv("Titanic data/train.csv",
col_types = cols( Name = col_skip(), Ticket = col_skip(),
Cabin = col_skip()))
Titanic_train_raw <- read_csv("Titanic data/train.csv",
col_types = cols( Name = col_skip(), Ticket = col_skip(),
Cabin = col_skip()))
#At here I skiped their name which does not impact the model training,
#their ticket number with is not important and their cabin which has limit number
################ The age gap.
#I notice there are some age part are empty so i decided to use mean of age to fill the gap.
#but before that I just need to check the distribution of age between the survived and died
#calcuate the average of all the age
The_average_age <- mean(Titanic_train_raw$Age, na.rm = TRUE)
#print(The_average_age)
######### fill the age gap
#they are close enough, now fill the age gap.
#fill the "age gap"
Titanic_train_raw$Age[is.na(Titanic_train_raw$Age)] <- The_average_age
Titanic_train_without_age_gap <- Titanic_train_raw
########The data combination#####
#delete the 2 line in the embarked
Titanic_train <- Titanic_train_without_age_gap[!is.na(Titanic_train_without_age_gap$Embarked), ]
Titanic_train_cleaned <- na.omit(Titanic_train_without_age_gap)
#delete all the data that including at least one NA value
#Change all the gender to the dummy variable
#male = 1 female equal to zero
TTD <- dummy_cols(Titanic_train_cleaned, select_columns = "Sex", remove_selected_columns = TRUE)
############
library(randomForest)
library(caret)
############
TTD$Survived <- as.factor(TTD$Survived)
# Prepare your data (TTD) and the trainControl for cross-validation
control <- trainControl(method="cv", number=10, search="grid", allowParallel = TRUE)
# Define a sequence of ntree values to test
ntreeGrid <- expand.grid(mtry=1:10)
# Train the model across the ntree range
set.seed(12345)
# Note: mtry might need to be set or explored as well; here we use the default sqrt(number of predictors)
model_test <- train(Survived ~ ., data=TTD, method="rf", trControl=control, tuneGrid=ntreeGrid)
print(model_test)
# the optimual mtry is 5
# Prepare your data (TTD) and the trainControl for cross-validation
control <- trainControl(method="cv", number=10, search="grid", allowParallel = TRUE)
# Define a sequence of ntree values to test
ntreeGrid <- expand.grid(mtry=1:10)
# Train the model across the ntree range
set.seed(12345)
# Note: mtry might need to be set or explored as well; here we use the default sqrt(number of predictors)
model_test <- train(Survived ~ ., data=TTD, method="rf", trControl=control, tuneGrid=ntreeGrid)
print(model_test)
# the optimual mtry is 5
#calculate how many row in the TTD data set
cut_data<- sample(1:nrow(TTD), size = 9/10* nrow(TTD), replace = FALSE)
#select the 90% of the data set for the training
training_set <- TTD[cut_data, ]
#rest of 10% for the test
testing_set <- TTD[-cut_data, ]
rf_model <- randomForest(Survived ~ ., data = training_set,
ntree = 10000,
mtry = 3,
nodesize = 1,
importance = TRUE)
print(rf_model)
predictions <- predict(rf_model, newdata = testing_set)
# Assuming 'Survived' is a factor and predictions are made accordingly
actual <- testing_set$Survived
conf_matrix <- table(Predicted = predictions, Actual = actual)
# Calculate accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
setwd("/Users/tie/Documents/GitHub/The-data-analysis-job--")
test_data_set <- read_csv("Titanic data/test.csv")
test_data_set <- read_csv("Titanic data/test.csv",col_types = cols( Name = col_skip(), Ticket = col_skip(),
Cabin = col_skip())
)
mean_age <- mean(training_set$Age, na.rm = TRUE)
test_data_set$Age <- ifelse(is.na(test_data_set$Age), mean_age, test_data_set$Age)
test_data_ultra <- dummy_cols(test_data_set, select_columns = "Sex", remove_selected_columns = TRUE)
predictions <- predict(rf_model, newdata = test_data_ultra, type = "response")
predictions
binary_predictions <- as.integer(predictions) - 1
test_data_ultra$Survived <- binary_predictions
final_output <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
write.csv(final_output, "final_predictions_rf_model.csv", row.names = FALSE)
test_data_ultra
test_data_ultra
binary_predictions
final_output
final_output_evil <- data.frame(PassengerId = test_data_ultra$PassengerId, Survived = test_data_ultra$Survived)
# 将输出保存到CSV文件中
write.csv(final_output_evil, "final_predictions_rf.csv", row.names = FALSE)
test_data_ultra
0.77751 - 0.77033
0.00718 * 100
